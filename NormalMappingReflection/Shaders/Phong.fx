/*
Author: Andrew Esposito
Class: EGP-300 <Section 52>
Assignment: Shader Materials
Certification of Authenticity:
I certify that this assignment is entirely my own work.
*/

uniform extern float4x4 gWorld;
uniform extern float4x4 gWorldInverseTranspose;
uniform extern float4x4 gWVP;

uniform extern float3 gEyePosW;
uniform extern float3 gLightVecW;
uniform extern float gSpecularPower;
uniform extern float4 gSpecularMtrl;
uniform extern float4 gSpecularLight;
uniform extern float4 gDiffuseMtrl;
uniform extern float4 gDiffuseLight;
uniform extern float4 gAmbientMtrl;
uniform extern float4 gAmbientLight;

uniform extern bool gRenderDiffuse;
uniform extern bool gRenderSpecular;
// TODO: implement gRenderAmbinet toggle
uniform extern bool gRenderAmbient;
uniform extern bool gRenderTexture;
uniform extern texture gTexture;

sampler TextureSampler = sampler_state
{
	Texture = <gTexture>;
	MinFilter = Anisotropic;
	MagFilter = LINEAR;
	MipFilter = LINEAR;
	MaxAnisotropy = 8;
	AddressU  = WRAP;
    AddressV  = WRAP;
};

struct InputVS {
};

struct OutputVS {
	float4 posH : POSITION0;
	float3 normalW : TEXCOORD0;
	float3 posW : TEXCOORD1;
	float2 tex0 : TEXCOORD2;
};

OutputVS PhongVS(float3 posL : POSITION0, float3 normalL : NORMAL0, float2 tex0 : TEXCOORD0)
{
	// Zero out our output.
	OutputVS outVS = (OutputVS)0;
	// Transform normal to world space.
	outVS.normalW = mul(float4(normalL, 0.0f),
	gWorldInverseTranspose).xyz;
	outVS.normalW = normalize(outVS.normalW);
	// Transform vertex position to world space.
	outVS.posW = mul(float4(posL, 1.0f), gWorld).xyz;

	// Transform to homogeneous clip space.
	outVS.posH = mul(float4(posL, 1.0f), gWVP);

	//**********USED FOR TEXTURE DISPLAY
	// Pass on texture coordinates to be interpolated in
	// rasterization.
	outVS.tex0 = tex0;
	//**********

	// Done--return the output.
	return outVS;
}

float4 PhongPS(float3 normalW : TEXCOORD0, float3 posW : TEXCOORD1, float2 tex0 : TEXCOORD2) : COLOR
{
	// Interpolated normals can become unnormal--so normalize.
	normalW = normalize(normalW);
	// Compute the vector from the vertex to the eye position.
	float3 toEye = normalize(gEyePosW - posW);
	// Compute the reflection vector.
	float3 r = reflect(-gLightVecW, normalW);
	// Determine how much (if any) specular light makes it
	// into the eye.
	float t = pow(max(dot(r, toEye), 0.0f), gSpecularPower);
	// Determine the diffuse light intensity that strikes the vertex.
	float s = max(dot(gLightVecW, normalW), 0.0f);
	// Compute the ambient, diffuse, and specular terms separately.
	float3 specVal = float4(t*(gSpecularMtrl*gSpecularLight).rgb, 0.0f);
	float3 diffuseVal = float4(s*(gDiffuseMtrl*gDiffuseLight).rgb, 0.0f);
	float3 ambient = (gAmbientMtrl*gAmbientLight).xyz;

	float4 diffuse;
	float4 spec;
	diffuse.rgb = ambient + diffuseVal;
	diffuse.a = gDiffuseMtrl.a;
	spec = float4(specVal.rgb, 0.0f);

	/*
	//**********USED FOR TEXTURE DISPLAY
	// Get texel from texture map that gets mapped to this pixel.
	float3 texColor = tex2D(TextureSampler, tex0).rgb;
	// Combine texture color with color generated by lighting.
	diffuse *= c.rgb * texColor;
	// Add in the specular term separately.
	return float4(ambient + diffuse + spec, c.a);
	//**********
	//*/

	float3 texColor = tex2D(TextureSampler, tex0).rgb;
	[flatten] if (gRenderTexture)
	{
		texColor = texColor;
	}
	else
	{
		texColor = float3(1.0f,1.0f,1.0f); //1.0f will not affect the diffuse
	}
	float3 texVal;
	[flatten] if (gRenderDiffuse)
	{
		texVal = diffuse.rgb * texColor;
	}
	else
	{
		texVal = texColor;
	}

	// Sum all the terms together and copy over the diffuse alpha.
	[flatten] if (gRenderSpecular)
	{
	return float4(spec.rgb + texVal, gDiffuseMtrl.a);
	}
	else
	{
		return float4(texVal, gDiffuseMtrl.a);
	}
}

technique PhongTech
{
    pass P0
    {
        // Specify the vertex and pixel shader associated with this pass.
        vertexShader = compile vs_2_0 PhongVS();
        pixelShader  = compile ps_2_0 PhongPS();
    }
}
